pipeline {
    agent any
    
    environment {
        SONARQUBE_URL = 'http://localhost:9000'
    }

    tools {
        // Use the correct SonarScanner tool name from the configuration
        sonarRunner 'sonar_scanner'  // Name should match the configured name in Jenkins
    }

    stages {
        stage('Pull Code') {
            steps {
                git branch: 'main', poll: false, url: 'https://github.com/Lay-ke/hng_12-stage_01.git'
            }
        }
    

        stage ("SonarQube analysis") {
            steps {
                // Use Jenkins credentials stored in the Jenkins Credentials Manager
                withCredentials([string(credentialsId: 'SONARQUBE_TOKEN', variable: 'SONARQUBE_TOKEN')]) {
                    sh 'echo $SONARQUBE_TOKEN'
                    // Run SonarQube analysis using the SonarScanner
                    withSonarQubeEnv('sonarqube_server') {  // 'SonarQube' should match the SonarQube server configuration in Jenkins
                        sh ''' 
                            sonar-scanner \
                            -Dsonar.projectKey=my-python-project \
                            -Dsonar.sources=. \
                            -Dsonar.host.url=$SONARQUBE_URL \
                            -Dsonar.login=$SONARQUBE_TOKEN \
                            -Dsonar.language=py  # Ensure SonarQube knows it's analyzing Python code
                        '''
                    }
                }
            }
        }

        stage('Quality Gate') {
            steps {
                script {
                    // Wait for SonarQube analysis results and quality gate status
                    timeout(time: 1, unit: 'HOURS') {
                        waitForQualityGate abortPipeline: true
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'Quality Gate passed'
        }
        failure {
            echo 'Quality Gate failed'
        }
    }
}